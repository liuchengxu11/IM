{
  "uid" : "1704f1b18404ed8c",
  "name" : "test_post_user_dingDingRoleList[deptId=-241295858]",
  "fullName" : "TestSuite.im_select_dept_role.test_select_dept_role.Test_case#test_post_user_dingDingRoleList[deptId=-241295858]",
  "historyId" : "fe9acb80952c2388d8478319b9e13ffd",
  "time" : {
    "start" : 1584417364694,
    "stop" : 1584417364713,
    "duration" : 19
  },
  "description" : "\n        钉钉-获取角色列表\n        ",
  "descriptionHtml" : "<pre><code>    钉钉-获取角色列表\n</code></pre>\n",
  "status" : "broken",
  "statusMessage" : "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <TestSuite.im_select_dept_role.test_select_dept_role.Test_case object at 0x7fc3f8303710>\ntest1 = 'deptId=', test2 = '241295858'\n\n    @allure.epic(\"钉钉\")\n    @allure.feature(\"获取角色列表\")\n    @pytest.mark.parametrize(\"test1,test2\", DingDing_deptId)\n    def test_post_user_dingDingRoleList(self, test1, test2):\n        \"\"\"\n        钉钉-获取角色列表\n        \"\"\"\n        uri = \"/api/user/dingDingRoleList\"\n        allure.attach(SX_IM_API + uri, \"地址\", allure.attachment_type.TEXT)\n        headers = Login_Headers\n        allure.attach(json.dumps(\n            headers,\n            ensure_ascii=False,\n            indent=4), \"请求头\", allure.attachment_type.TEXT)\n        common = Common()\n        response = common.post(\n            uri,\n            params1=test1,\n            params2=test2,\n            headers=headers)\n>       allure.attach(json.dumps(response.json(), ensure_ascii=False,\n                                 indent=4), \"响应\", allure.attachment_type.TEXT)\n\nTestSuite/im_select_dept_role/test_select_dept_role.py:221: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/requests/models.py:892: in json\n    return complexjson.loads(self.text, **kwargs)\n/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/__init__.py:348: in loads\n    return _default_decoder.decode(s)\n/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fc4301fe450>, s = '', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/decoder.py:355: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "__pytest_repeat_step_number",
    "time" : {
      "start" : 1584417364693,
      "stop" : 1584417364693,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "\n        钉钉-获取角色列表\n        ",
    "status" : "broken",
    "statusMessage" : "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
    "statusTrace" : "self = <TestSuite.im_select_dept_role.test_select_dept_role.Test_case object at 0x7fc3f8303710>\ntest1 = 'deptId=', test2 = '241295858'\n\n    @allure.epic(\"钉钉\")\n    @allure.feature(\"获取角色列表\")\n    @pytest.mark.parametrize(\"test1,test2\", DingDing_deptId)\n    def test_post_user_dingDingRoleList(self, test1, test2):\n        \"\"\"\n        钉钉-获取角色列表\n        \"\"\"\n        uri = \"/api/user/dingDingRoleList\"\n        allure.attach(SX_IM_API + uri, \"地址\", allure.attachment_type.TEXT)\n        headers = Login_Headers\n        allure.attach(json.dumps(\n            headers,\n            ensure_ascii=False,\n            indent=4), \"请求头\", allure.attachment_type.TEXT)\n        common = Common()\n        response = common.post(\n            uri,\n            params1=test1,\n            params2=test2,\n            headers=headers)\n>       allure.attach(json.dumps(response.json(), ensure_ascii=False,\n                                 indent=4), \"响应\", allure.attachment_type.TEXT)\n\nTestSuite/im_select_dept_role/test_select_dept_role.py:221: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/requests/models.py:892: in json\n    return complexjson.loads(self.text, **kwargs)\n/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/__init__.py:348: in loads\n    return _default_decoder.decode(s)\n/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fc4301fe450>, s = '', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/decoder.py:355: JSONDecodeError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "cb9d8c1220826ba5",
      "name" : "地址",
      "source" : "cb9d8c1220826ba5.txt",
      "type" : "text/plain",
      "size" : 68
    }, {
      "uid" : "a077c22309dc97e4",
      "name" : "请求头",
      "source" : "a077c22309dc97e4.txt",
      "type" : "text/plain",
      "size" : 654
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "epic",
    "value" : "钉钉"
  }, {
    "name" : "feature",
    "value" : "获取角色列表"
  }, {
    "name" : "parentSuite",
    "value" : "TestSuite.im_select_dept_role"
  }, {
    "name" : "suite",
    "value" : "test_select_dept_role"
  }, {
    "name" : "subSuite",
    "value" : "Test_case"
  }, {
    "name" : "host",
    "value" : "liuchengxudeMacBook-Pro.local"
  }, {
    "name" : "thread",
    "value" : "45313-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "TestSuite.im_select_dept_role.test_select_dept_role"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "test1",
    "value" : "'deptId='"
  }, {
    "name" : "test2",
    "value" : "'241295858'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "1704f1b18404ed8c.json",
  "parameterValues" : [ "'deptId='", "'241295858'" ]
}